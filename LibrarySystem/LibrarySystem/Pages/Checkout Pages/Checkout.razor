@page "/Checkout"
@using LibrarySystem.Services
@using LibrarySystem.Pages.Members_Pages
@inject IBooksService _booksService
@inject IMembersService _membersService
@inject ICheckoutService _checkoutService

<AuthorizeView Context="Checkout" Roles="Admin, Assistant">
    <Authorized>
        <div class="container text-center">
            <h3>Checkout Library Books</h3>

            <div class="card">

                <div class="card-header bg-primary">
                    <div class="container text-white text-center">
                        @if (LibraryMemberSelected)
                        {
                            <h3>Member: @LibraryMember.FirstName @LibraryMember.LastName</h3>
                        }
                        else
                        {
                            <h3>Add a Library Member to start checkout process.</h3>
                        }

                    </div>
                </div>
                <div class="card-body">
                    @if (LibraryMemberSelected)
                    {
                        <EditForm Model="@BookToAdd" OnValidSubmit="@AddBook">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="Author" class="control-label">ISBN: </label>
                                <InputText id="author" @bind-Value="BookToAdd.ISBN" class="form-control" />
                                <ValidationMessage For="@(() => BookToAdd.ISBN)" />
                            </div>

                            <input class="btn btn-primary" type="submit" value="Add" @onclick="@AddBook">
                            <input class="btn btn-primary" type="submit" value="Checkout Books" @onclick="@CheckoutBooks">

                        </EditForm>
                    }
                    else
                    {
                        <input class="btn btn-primary" type="submit" value="Add Member" @onclick="@AddMember">
                    }

                </div>
            </div>


            @if (errorFlag == 1)
            {
                <h1 style="color:red">@errorMsg</h1>
            }

            @if (books.Count > 0)
            {

                <h3>Scanned Added to Checkout</h3>
                <br />
                <br />
                <div class="container">
                    @for (int i = 0; i < books.Count; i += 3)
                    {
                        <div class="row">
                            @for (int j = i; (j < i + 3) && (j < books.Count); j++)
                            {
                                <div class="col-md-4 col-md-2">
                                    <BookCard Book="books[j]"></BookCard>
                                </div>
                                <br />
                            }

                            <div class="col-sm-12 shelf hidden-md hidden-lg"></div>
                        </div>
                        <br />
                        <br />
                    }
                </div>
                <br />
                <br />
            }

        </div>

        <MemberSearchModal @ref="MemberSearchModal" LibraryMember="@LibraryMember" CloseEventCallback="@SetMember"></MemberSearchModal>
        <SuccessModal @ref="SuccessModal" CloseEventCallback="@ResetPage"></SuccessModal>

    </Authorized>
    <NotAuthorized>
        <h2>You are not authorized to view this page!</h2>
    </NotAuthorized>
</AuthorizeView>

@code {

    public MemberSearchModal MemberSearchModal = new MemberSearchModal();

    public SuccessModal SuccessModal = new SuccessModal();

    private Book BookToAdd = new Book();

    private List<Book> books = new List<Book>();
    private LibraryMember LibraryMember { get; set; } = new LibraryMember();

    private int BookCountLimit = 6;

    private bool LibraryMemberSelected = false;

    string errorMsg = "";
    int errorFlag = 0;

    void AddMember()
    {
        MemberSearchModal.Show();
    }

    void SetMember(LibraryMember libraryMember)
    {
        LibraryMember = libraryMember;

        LibraryMemberSelected = true;

        if (LibraryMember.MemberType == MemberType.LibraryMember)
        {
            int BooksOut = _checkoutService.CopiesCheckedOut(libraryMember);
            BookCountLimit = 6 - BooksOut;
        }
        else if (LibraryMember.MemberType == MemberType.Assistant || LibraryMember.MemberType == MemberType.Manager)
        {
            int BooksOut = _checkoutService.CopiesCheckedOut(libraryMember);
            BookCountLimit = 12 - BooksOut; 
        }


        StateHasChanged();
    }

    void AddBook()
    {
        if (books.Count < BookCountLimit)
        {
            int result = _checkoutService.CopiesLeft(BookToAdd);

            if (result < 0)
            {
                errorFlag = 1;
                errorMsg = "You have entered an invalid ISBN value. Please Try Again.";
            }
            else if (result == 0)
            {
                errorFlag = 1;
                errorMsg = "There are no copies of this book in stock.";
            }
            else
            {
                errorFlag = 0;
                books.Add(_booksService.FindByISBN(BookToAdd.ISBN));
            }

            BookToAdd = new Book();


        }
        else
        {
            errorFlag = 1;
            errorMsg = "You have reached the maximum books for checkout.";
        }

        StateHasChanged();
    }


    private void CheckoutBooks()
    {

        _checkoutService.CheckoutBook(books, LibraryMember);

        SuccessModal.Show();
    }

    void ResetPage()
    {
        errorFlag = 0;
        LibraryMemberSelected = false;
        LibraryMember = new LibraryMember();
        books.Clear();

        StateHasChanged();
    }

}
